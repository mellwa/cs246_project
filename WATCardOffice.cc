/****************************************************This is a source file for WATCardOffice.It contains four functions: a constructor, WATCard creator, fundtransfer and a destructor.1. WATCardOffice will create a WATCardOffice and save prt as prtTmp.2. create will consume student id and initial amount and produce a WATCard on heap   with the student id and balance (amount).3. transfer will consume id, amount and the reference to a WATCard. If will transfer amount to   the WATCard. (adding amount with the current balance of the WATCard4. ~WATCardOffice is a destructor, ending WATCardOffice and printting "F" state to printer***/#include <iostream>#include "WATCardOffice.h"// extern PRNG allows to use create a "random" number based on the provided seedextern PRNG prng;// WATCardOffice will create a WATCardOffice and save prt as prtTmp.// Also, it will print out a "S" state through printer.WATCardOffice::WATCardOffice(Printer &prt){	prtTmp = &prt;    prtTmp->print(Printer::WATCardOffice, 'S');}// create will consume student id and initial amount and produce a WATCard on heap// with the student id and balance (amount).// Also, it will print out a "C" state through printer.WATCard* WATCardOffice::create(unsigned int id, unsigned int amount){    WATCard* tmpCard = new WATCard(id);//create a watcard on heap    tmpCard->setBalance(amount);    // print the correct statment    prtTmp->print(Printer::WATCardOffice,'C',id,amount);    return tmpCard;}// transfer will consume id, amount and the reference to a WATCard. If will transfer amount to// the WATCard. (adding amount with the current balance of the WATCardvoid WATCardOffice::transfer(unsigned int id, unsigned int amount, WATCard &card){    prtTmp->print(Printer::Student,id,'t',amount);// student initiate transfer    prtTmp->print(Printer::WATCardOffice,'t',id,amount);//starting transfer    unsigned int actual_money = amount;//setting actual_money transferred    if(prng(3) == 0){        actual_money /= 2;//1/4 chance of halfed value    }    card.setBalance(card.getBalance() + actual_money);//setting balance as the new sum    prtTmp->print(Printer::WATCardOffice,'T',id,actual_money);//complete transfer    prtTmp->print(Printer::Student,id,'T',card.getBalance());// student confirm transfer infor}// ~WATCardOffice is a destructor, ending WATCardOffice and printting "F" state to printerWATCardOffice::~WATCardOffice(){	// destructor and print out WATCardOffice finished	prtTmp->print(Printer::WATCardOffice, 'F');}